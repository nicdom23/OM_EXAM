model ModelName
  options noimplicit
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  declarations
    Chess = 1..2 !set composed on number 1 and 2
    Res = 1..2 !set representing the number of constraints related to the resources availability
    
    x: array(Chess) of mpvar!array of dimension 2, the dimension of chess of mpvar, that are decision variables
    c: array(Chess) of integer !coefficients of the objective function
    b: array(Res) of integer  !amount of resource availability
    !now this is a matrix
    A:array(Res,Chess) of integer !matrix of the coefficient of the use of the resources
    !decision variables
    !xs,xl : mpvar

    !rename from objective
    profit:linctr  !stands for linear constraint, but it is not a constraint, you could also put a name on the constrants
  end-declarations

c::[5,20] !values of the objective function coefficients
A::[3,2,
    1,3]
b::[160, 200]
writeln("Begin running model")
  
  forall(j in Chess) x(j) is_integer ! non-negativity and integrality constraint
 
  !constrains now are
  forall(i in Res) sum(j in Chess) A(i,j)*x(j) <= b(i) ! for each i   ||model is just in one row now we could treat larger sets of decision variables and of constraints using larger matrices
  !profit now is
  profit:=sum( j in Chess) c(j)*x(j) 

 writeln("Optimal value", getobjval) !return 0 problem is not solved
 forall(i in Chess) writeln("x(",i,")",getsol(x(i)))!return 0 no problem solved, has no meaning for now
  

!use keyword to define the goal of the simulation
maximize(profit) !here we use the apt algorithm, the solver is called at this moment, getobjvalue contains the best solution


  !here we see the solution
  writeln("Optimal value", getobjval) !1333.333
  
   forall(i in Chess) writeln("x(",i,")=",getsol(x(i)))
  
  writeln("End running model")
end-model
! is_binary  makes binary variables