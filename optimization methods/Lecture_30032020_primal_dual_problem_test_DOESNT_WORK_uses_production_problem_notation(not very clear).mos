model ModelName
  options noimplicit
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  declarations
    n_1 = 1..3 !n of decision variables of primal problem/n of constraints of dual problem
    n_2 = 1..3 !n of constraints of primal problem/n of decision variables of dual problem

    !write data from the equation(notice that this problem cannot be anymore defined as a production problem, the dual cannot be defined as a min gain problem,I use generic names)
    c:array(n_1) of integer 
    b:array(n_2) of integer 
    A:array(n_1,n_2) of integer 

    !decision variables
    x: array(n_1) of mpvar !primal problem decision variables
    pi: array(n_2) of mpvar !dual problem decision variables

     primalConst: array(n_1) of linctr
     dualConst: array(n_2) of linctr


    z:linctr !primal problem objective function
    w:linctr !dual problem objective function


  end-declarations

  !let's define the declarations

  c::[5,2,3]
  b::[4,10,5]
  A::[1,-2,5,
       2,7,2,
       2,0,4]

  !primal problem
  
  
  ! z= c^t * x
  z:=sum( j in n_1) c(j)*x(j) !to maximize

  !constraints:= Ax inequality with b
  primalConst(1) := sum(j in n_1) A(1,j)*x(j)  = b(1)
  primalConst(2) := sum(j in n_1) A(2,j)*x(j) >= b(2)
  primalConst(3) := sum(j in n_1) A(3,j)*x(j) <= b(3)

  !non-negativity constraint already implicit

  writeln("Begin running model")


   !solve primal problem
  maximize(z)

  !here we see the solution
   writeln("Optimal value", getobjval) !6.1764

   forall(i in n_1) writeln("x(",i,")=",getsol(x(i)))

  writeln("End running model")


  forall(i in n_2) sethidden(primalConst(i),TRUE) !hides the constraints of the primal problem


  !dual problem

  w:=sum( j in n_2) b(j)*pi(j) !to minimize

  forall(i in n_1) dualConst(i) := sum(j in n_2) A(j,i)*pi(j) <= c(i) !here the constraints all have the same inequality



  pi(1) is_free
  pi(2) <=0
  !pi(3) >=0 default


  writeln("Begin running model")


   !solve dual problem
  minimize(w)

  !here we see the solution
   writeln("Optimal value", getobjval) !1333.333

   forall(i in n_2) writeln("pi(",i,")=",getsol(pi(i)))

  writeln("End running model")

end-model
